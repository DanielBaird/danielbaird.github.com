---
layout: post
category: articles
title: 'Ruby Walkthrough: Making Bingo Cards, Part 3'
---

h1. Ruby Walkthrough: Making Bingo Cards, Part 3


I'm walking through a Ruby project -- making cards for a game of "Baby Bingo" at my wife's baby shower.  In (link)part 1, I describe the project and get a bit of code down that makes a bingo card. In (link)part 2, I wrap the code up into a class, and start using strings instead of numbers.

Here's part 3.

h2. Bug, huh

I said at the end of part 2 that we had a bug.  It hasn't caused a single problem yet.  Have you guessed what it is?  Don't worry I'll point it out soon.  Onward!

h2. (maybe leave out?) What's so special about the number 5?

The answer is: nothing.  So why are all our cards 5&times;5?  Being able to make smaller cards would make testing a little easier.  Here's how to make the card size something you can set when you make one:

<pre><code>
def initialize items, size = 5
    @size = size
    @card = []
    size.times do
        row = []
        size.times do
            row &lt;&lt; items.delete_at(rand items.length)
        end
        @card &lt;&lt; row
    end
end
</code></pre>

I've added @size@ to the list of things you give to @initialize@.  The @= 5@ part means that specifying a size is optional, and if you don't, it defaults to 5.  Then in the couple of places where the code said @5.times ...@ I changed it to @size.times ...@.  So now, all of these work:

<pre><code>
card_size_5x5 = BingoCard.new [*'a'..'z'], 5
size_also_5x5 = BingoCard.new [*'a'..'z']
card_size_3x3 = BingoCard.new [*'a'..'z'], 3
</code></pre>

Notice that I also "remembered" the size you gave in the variable @@size@.  I'm not using that, yet, but it seemed like it might be useful later.

Let's try out different size boards.  For anything larger than 5&times;5, we'll need to use something like @\[\*'aa'..'zz'\]@ to get enough symbols.

<pre><code>
card_size_8x8 = BingoCard.new [*'aa'..'zz'], 8
card_size_5x5 = BingoCard.new [*'a'..'z']
card_size_3x3 = BingoCard.new [*'a'..'z'], 3
card_size_2x2 = BingoCard.new [*'a'..'z'], 2

puts '8x8:'
card_size_8x8.show
puts '5x5:'
card_size_5x5.show
puts '3x3:'
card_size_3x3.show
puts '2x2:'
card_size_2x2.show
</code></pre>


h2. Ties

There are twelve 'winning lines' on a 5&times;5 bingo card: five vertical lines, five horizontal lines, and two diagonals.  Ties happen when a winning line on one card has the same five items in it as a winning line on another card.  The order doesn't matter.  If those five items are called in the bingo game, the two cards will both win at the same time.

I want to avoid this in my bingo game.  Here's my idea for avoiding ties:  Each time I create another card, I will compare its twelve winning lines with the winning lines on all the cards I've already made.  If the new card ties, I can just throw it away and make another.  If there's no ties, I can add the new card to my collection.  Then simply repeat until I have enough cards.

h2. Detecting ties: listing winning lines

Wouldn't it be convenient to just ask a bingo card for a list of its winning lines?  Let's add that to the @BingoCard@ class.

Here's how our <code>@card</code> data structure looks for a 3&times;3 card:

| <code>@card[0][0]</code> | <code>@card[1][0]</code> | <code>@card[2][0]</code> |
| <code>@card[0][1]</code> | <code>@card[1][1]</code> | <code>@card[2][1]</code> |
| <code>@card[0][2]</code> | <code>@card[1][2]</code> | <code>@card[2][2]</code> |

<table>
    <tr>
        <td>@card[0][0]</td>
        <td>@card[0][1]</td>
        <td>@card[0][2]</td>
    </tr><tr>
        <td>@card[1][0]</td>
        <td>@card[1][1]</td>
        <td>@card[1][2]</td>
    </tr><tr>
        <td>@card[2][0]</td>
        <td>@card[2][1]</td>
        <td>@card[2][2]</td>
    </tr>
</table>

This is the first time I've used Ruby's square bracket syntax for getting to things in arrays.  It looks like this: @my_array\[item_index\]@.  That gets you the thing at @item_index@ in the array @my_array@.  The index starts at 0, so @my_array\[0\]@ is the first thing, @my_array\[1\]@ is the second, etc.

In the card diagram above, the first set of square brackets, <code>@card\[1\]</code>, gets the row.  The second set of brackets get the square in that row.  So (with a 3&times;3 card) <code>@card\[2\]\[1\]</code> gets the middle square from the last row.

Here's my first, incomplete implementation of @BingoCard.lines@:

<pre><code>
class BingoCard
    # ------------------------------------
    def initialize items, size = 5
        # ...
    end
    # ------------------------------------
    def show
        # ...
    end
    # ------------------------------------
    def lines
        card_lines = []  # start with an empty list
        @size.times do |a|      # a loops slowly
            row = []              # find the a-th row and the
            column = []           # a-th column at the same time

            @size.times do |b|  # b loops quickly
                row &lt;&lt; @card[a][b]
                column &lt;&lt; @card[b][a]
            end

            # temporary printing, to check if this works.
            puts "   row #{a} is  " + row
            puts "column #{a} is  " + column

            # add the a-th row and column to card_lines
            card_lines &lt;&lt; row
            card_lines &lt;&lt; column
        end
        card_lines  # finally, return the lines array
    end
    # ------------------------------------
end
</code></pre>

That implentation doesn't do diagonals, but let's check if this @a@/@b@ thing works, first.

<pre><code>
    card_size_5x5 = BingoCard.new [*'a'..'z']
    card_size_5x5.show
    puts card_size_5x5.lines.inspect
</code></pre>

So that works.  Winning lines should match in any order, so I have to remember treat each line's list of squares as an unordered set rather than an ordered array...

Hmm.  That sounds like a bit much work.

So how about this instead: I'll order the squares in each line, and join them up into one big string, so a winning line will look like a sort of nonsense "word".  Then checking for ties is just seeing if the "word" in in my word list already.

It'll make more sense when you see it working.  Here's my new @BingoCard.lines@:

<pre><code>
    def lines
        card_lines = []  # start with an empty list
        @size.times do |a|      # a loops slowly
            row = []              # find the a-th row and the
            column = []           # a-th column at the same time

            @size.times do |b|  # b loops quickly
                row &lt;&lt; @card[a][b]
                column &lt;&lt; @card[b][a]
            end

            row_word = row.sort.join
            column_word = column.sort.join

            # temporary printing, to check if this works.
            puts "   row #{a} is  " + row_word
            puts "column #{a} is  " + column_word

            # add the a-th row and column to card_lines
            card_lines &lt;&lt; row_word
            card_lines &lt;&lt; column_word
        end
        card_lines  # finally, return the lines array
    end
</code></pre>

<aside class="note language ruby">
The **@inspect@** method on a Ruby object returns a human-readable string that shows what's in the object you called @inspect@ on.  It's great for debugging.

The **@join@** method on a Ruby array returns a string made up of all the array items, joined up into one big long string.  If you want something in between the array items, like a comma, you can pass that to @join@.  So:

<pre><code>
puts [*1..3].join        # gives:  "123"
puts [*1..3].join ", "   # gives:  "1, 2, 3"
</code></pre>
</aside>












